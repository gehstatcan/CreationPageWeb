---
execute:
  echo: false
---

# Compteurs - séries {{< var saison >}}

{{< include _lectureCSV.qmd >}}

```{r compteurs}
#| warning: false
#| message : false


#en Série ?
if (fichiersSériePrésents) {

# Création de la liste des compteurs. Le DS joueur doit déjà exister.


# Fusionne les DataFrames joueurs et équipes, ajoute le suffixe "(Équipe)" au nom du joueur s'il est identique au nom de l'équipe.
joueursÉquipes <- merge(joueurs, équipes, by = "NoÉquipe") %>%
  select(NoÉquipe, NoJoueur, NomÉquipe, PrénomJoueur, NomJoueur)
   #%>%
  #filter(NomJoueur != NomÉquipe)  # Pour enlever les équipes du classement

# Agrège les points par équipe et joueur, puis ordonne par NoJoueur.
ptsParJoueur <- aggregate(Points ~ NoÉquipe + NoJoueur, data = RépondantsParJoueurs_series, FUN = sum) %>% arrange(NoJoueur)

# Fusionne les informations des joueurs avec les points agrégés.
compteurs <- merge(joueursÉquipes, ptsParJoueur) 

# Calcule le nombre de parties jouées (PJ) par combinaison de NoÉquipe et NoJoueur.
PJ <- RépondantsParJoueurs_series %>%
  group_by(NoÉquipe, NoJoueur) %>%
  summarize(PJ = n()) %>%
  select(NoÉquipe, NoJoueur, PJ)

# Fusionne les informations de PJ avec le DataFrame compteurs, calcule PointsParPJ et ordonne par PointsParPJ.
compteurs <- merge(compteurs, PJ) %>%
  mutate(PointsParPJ = round(Points / PJ, 2))

# Préparation JOUEURS
  CompteursJoueurs <- filter(compteurs, NomJoueur != NomÉquipe) %>%  # Pour enlever les équipes du classement
    mutate(NomComplet =  paste(PrénomJoueur, NomJoueur, sep = " ")) %>% 
    select("NomComplet","NomÉquipe", "PJ", "Points", "PointsParPJ")
  
  
  # Trie les données par ordre décroissant de PointsParPJ et attribue des positions aux joueurs en cas d'égalité.
  CompteursJoueurs <- CompteursJoueurs %>%
    # ajout du champs pour trier par PointsParPJ + Points 
    mutate(ConcatenationPts = as.numeric(sprintf("%.4f", PointsParPJ + Points/10000))) %>%  
    #Création de la position en fontion de PointsParPJ + Points
    mutate(Position = rank(desc(ConcatenationPts), ties.method = "min")) %>% 
    select(Position,NomComplet, NomÉquipe, PJ, Points, PointsParPJ) %>% # Sélection des champs
    arrange(Position) # Tri par desc PointsParPJ puis desc Points.

# Préparation Équipe
  CompteurÉquipes  <- filter(compteurs, NomJoueur == NomÉquipe) %>%  # Conserve seulement les équipes du classement
    select("NomÉquipe", "PJ", "Points", "PointsParPJ")
  
  CompteurÉquipes <- CompteurÉquipes %>%
    # ajout du champs pour trier par PointsParPJ + Points 
    mutate(ConcatenationPts = as.numeric(sprintf("%.4f", PointsParPJ + Points/10000))) %>%  
    #Création de la position en fontion de PointsParPJ + Points
    mutate(Position = rank(desc(ConcatenationPts), ties.method = "min")) %>% 
    select(Position, NomÉquipe, PJ, Points, PointsParPJ) %>% # Sélection des champs
    arrange(Position) # Tri par desc PointsParPJ puis desc Points.

  
#TODO Mettre un détail avec les parties du joueurs.
  # exemple détail possible : nopartie, date, équipe A, ptsA, équipe B, pts B, pts du joueur, % du total de la partie.
  # fusion entre calendrier et RépondantsParJoueurs

}
```

## Les équipes

```{r}

#en Série ?
if (fichiersSériePrésents) {

 #Affichage Équipes
  reactable(
    CompteurÉquipes,
    bordered = FALSE,
    highlight = TRUE,
    pagination = FALSE,
    
    theme = reactableTheme(
      cellPadding = "2px 5px",
      ),    
    
    defaultColDef = colDef(
      cell = function(value) format(value, nsmall = 0),
      align = "center",
      #cell = function(value) format(value, nsmall = 0),
      maxWidth = 60,
      headerStyle = list(background = "#f7f7f8")
    ),
    columns = list(
      "Position" = colDef(name="Pos",
                          maxWidth =  50,
                          align="center"),
      "NomÉquipe" =  colDef(name = "Équipe", 
                            maxWidth =250,
                            align = "left") ,
      "PJ" =  colDef(name = "PJ",
                         maxWidth =50,
                       align = "center") , 
                      cellStyle = function(value) list(border = "1px solid black"),
      "Points" =  colDef(name = "Pts",
                       maxWidth =50,
                       align = "center",
                       cell = function(value) format(value, nsmall = 0)),
      "PointsParPJ" =  colDef(name = "Pts/PJ",
                       maxWidth =70,
                       align = "center",
                       cell = function(value) htmltools::strong(format(value, nsmall = 2)))
  ))

}
```

## Les joueurs

```{r}
#en Série ?
if (fichiersSériePrésents) {
  
  #Création des points par parties par joueurs par date. Pour le détail des compteurs
  DétailJoueurs <- merge(RépondantsParJoueurs_series,joueurs, by = c("NoÉquipe", "NoJoueur") )
  DétailJoueurs <- merge(DétailJoueurs,équipes, by = c("NoÉquipe"))
  DétailJoueurs <- merge(DétailJoueurs,calendrier_series, by = c("NoPartie")) %>% 
      mutate(
      NomComplet = ifelse(NomJoueur == NomÉquipe, paste(NomJoueur, "(Équipe)", sep = " "), paste(PrénomJoueur, NomJoueur, sep = " "))
    ) %>% 
    select("NoPartie", "NoÉquipe", "NoJoueur","Points", "NomComplet","Date","NomÉquipeA","PointsA", "NomÉquipeB","PointsB") %>% 
    mutate( PointsTot = PointsA + PointsB, pctJoueur="N/A") %>% 
    mutate(pctJoueur = round(Points / PointsTot*100,2))
  
   #Affichage Joueurs
  
  NomColonneAExclure <- c("NoPartie","NoJoueur","NoÉquipe","NomComplet")
  DétailJoueurs <- DétailJoueurs %>%
    select( "Date", "NomComplet","NomÉquipeA","PointsA","PointsB", "NomÉquipeB", "Points","PointsTot","pctJoueur")
  
  reactable(CompteursJoueurs,
            bordered = FALSE,
            highlight = TRUE,
            pagination = FALSE,
            searchable = TRUE,
            
            theme = reactableTheme(
              cellPadding = "2px 5px",
              searchInputStyle = list(width = "100%")      
              ),        
            
            defaultColDef = colDef(
              align = "center",
              headerStyle = list(background = "#f7f7f8")      
            ),
            columns = list(
              "Position"    = colDef(name = "Pos",   maxWidth =50,  align = "center"),
              "NomComplet"  = colDef(name = "Joueur",maxWidth =270, align = "left"),
              "NomÉquipe"   = colDef(name = "Équipe",maxWidth =250, align = "left"),
              "PJ"          = colDef(name = "PJ",    maxWidth =50,  align = "center"), 
              "Points"      = colDef(name = "Pts",   maxWidth =50,  align = "center", cell = function(value) format(value, nsmall = 0)),
              "PointsParPJ" = colDef(name = "Pts/PJ",maxWidth =70,  align = "center", cell = function(value) htmltools::strong(format(value, nsmall = 2)))
            ),
            
            #Détail des parties du joueur
            details = function(index) {
              détailJoueurs2 <- DétailJoueurs[DétailJoueurs$NomComplet == CompteursJoueurs$NomComplet[index], ]
              if (nrow(détailJoueurs2) > 0) {
                détailJoueurs2 <- détailJoueurs2[, !(names(détailJoueurs2) %in% NomColonneAExclure)]
                htmltools::div(style = "padding: 1rem",
                               
                   reactable(détailJoueurs2,
                             bordered = FALSE,
                             highlight = FALSE,
                             pagination = FALSE,
                             searchable = FALSE,
                             outlined = TRUE,
                             #fullWidth = FALSE,
                             theme = reactableTheme(
                                 cellPadding = "2px 5px",
                                 ),
                             #valeurs par défaut pour les colonnes
                             defaultColDef = colDef(
                               # cell = function(value) format(value, nsmall = 1),
                               align = "left",
                               headerStyle = list(background = "#f7f7f8")
                               ),
                             columns = list(
                               "Date" = colDef(maxWidth =  100),
                               "NomÉquipeA" = colDef(name = "Équipe A",   maxWidth = 250, align = "right"),
                               "NomÉquipeB" = colDef(name = "Équipe B",   maxWidth = 250, align = "left"),
                               "PointsA"    = colDef(name = "Pts",        maxWidth = 50,  align = "left"),
                               "PointsB"    = colDef(name = "Pts",        maxWidth = 50,  align = "center"),
                               "Points"     = colDef(name = "Pts joueur", maxWidth = 100, align = "center"),
                               "PointsTot"  = colDef(name = "Pts A+B",    maxWidth = 100, align = "center"),
                               "pctJoueur"  = colDef(name = "joueur/A+B",  maxWidth = 100,align = "center")
                               )
                       )
                )
                } else {
                       "toto"  # Si aucun détail n'est disponible, renvoyer une chaîne vide
                }
              }
            )
}
```

*Vous voyez une erreur :* [{{< var email.support >}}](mailto:%7B%7B%3C%20var%20email.support%20%3E%7D%7D)
